=> Helm 

- Helm is a package manager for Kubernetes, equivalent of yum or apt.
- Helm deploys charts, which you can think of as a packaged application.
- it is a collection of all your versioned, pre-configured application resources which can be deployed as one unit. 

= Helm has two parts to it:
	- The client (CLI), which lives on your local workstation.
	- The server (Tiller), which lives on the Kubernetes cluster to execute whatâ€™s needed. (tiller is removed because of security in new helm versions)
	
= 3 concepts we need to get familiar with:
	- Chart: A package of pre-configured Kubernetes resources.
	- Release: A specific instance of a chart which has been deployed to the cluster using Helm.
	- Repository: A group of published charts which can be made available to others.

= Helm Chart :
	- Bundle of yaml files
	- create your own helm charts with helm
	- push them to helm repository
	- download and use existing ones

# helm create <chart_name>								: to create chart
# helm install bitnami/mysql --generate-name
# helm search repo bitnami
# helm repo update
# helm list
# helm status mysql-1612624192
 
chart_name/
 |
 |- .helmignore 
 | 
 |- Chart.yaml 
 | 
 |- values.yaml 
 | 
 |- charts/ 
 |
 |- templates/
 
 
 - .helmignore	: This holds all the files to ignore when packaging the chart. Similar to .gitignore, if you are familiar with git.
 - Chart.yaml	: This is where you put all the information about the chart you are packaging. So, for example, your version number, etc. This is where you will put all those details.
 - Values.yaml	: This is where you define all the values you want to inject into your templates. If you are familiar with terraform, think of this as helms variable.tf file.
 - Charts		: This is where you store other charts that your chart depends on. You might be calling another chart that your chart need to function properly.
 - Templates	: This folder is where you put the actual manifest you are deploying with the chart. For example you might be deploying an nginx deployment that needs a service, configmap and secrets. 
				  You will have your deployment.yaml, service.yaml, config.yaml and secrets.yaml all in the template dir. They will all get their values from values.yaml from above.
				  
= Helm can be use as Templating Engine:
	- Define a common blueprint
	- Dynamic values are replaced by placeholders
	- so instead of yaml file for each microservice you will have one
	
	<template yaml file>
	apiVersion: v1
	kind: Pod
	metadata:
	  name: {{ .Values.name }}
	spec:
	  containers:
	  - name: {{ .Values.containers.name }}
		image: {{ .Values.containers.image }}
		
		
	<all above values are defined in seperate yaml file>
	name: my-app
	containers:
	  name: my-app-container
	  image: my-app-image
	  
	  
	# helm install --set name=my-app
	# helm install --values=my-values.yaml <chart-name>
	
	
	   
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  