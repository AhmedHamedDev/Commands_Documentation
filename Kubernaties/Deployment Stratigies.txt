=> Deployment Stratigies

1- Recreate

- In this type of very simple deployment, all of the old pods are killed all at once and get replaced all at once with the new ones.

	apiVersion: apps/v1beta1
	kind: Deployment
	metadata:
	  name: awesomeapp
	spec:
	  replicas: 3
	  strategy:
			type: Recreate
	  template:
			metadata:
			   labels:
				 app: awesomeapp
			spec:
			  containers:
				- name: awesomeapp
				  image: imagerepo-user/awesomeapp:new
				  ports:
					- containerPort: 8080
					
2 - RollingUpdate

- The rolling deployment is the standard default deployment to Kubernetes.
- It works by slowly, one by one, replacing pods of the previous version of your application with pods of the new version without any cluster downtime.
- A rolling update waits for new pods to become ready via your readiness probe before it starts scaling down the old ones.
- If there is a problem, the rolling update or deployment can be aborted without bringing the whole cluster down. 



	apiVersion: apps/v1beta1
	kind: Deployment
	metadata:
	  name: awesomeapp
	spec:
	  replicas: 3
	  strategy:
        type: RollingUpdate
        rollingUpdate:
           maxSurge: 25%									: number of pods that is creating at a time
           maxUnavailable: 25%  							: number of pods that terminating at a time
	  template:
			metadata:
			   labels:
				 app: awesomeapp
			spec:
			  containers:
				- name: awesomeapp
				  image: imagerepo-user/awesomeapp:new
				  ports:
					- containerPort: 8080
				  readinessProbe:							: to check if pod is healthy or not
					httpGet:
					  path: /lazy
					  port: 8080
					initialDelaySecounds: 5
					periodSeconds: 5
					

3 - Blue/ Green (or Red / Black) deployments

- the old version of the application (green) and the new version (blue) get deployed at the same time. 
- When both of these are deployed, users only have access to the green; whereas, the blue is available to your QA team for test automation on a separate service or via direct port-forwarding.
- After the new version has been tested and is signed off for release, the service is switched to the blue version with the old green version being scaled down

4 - Canary


- A canary is used for when you want to test some new functionality typically on the backend of your application.
  Traditionally you may have had two almost identical servers: one that goes to all users and another with the new features 
  that gets rolled out to a subset of users and then compared. When no errors are reported, the new version can gradually 
  roll out to the rest of the infrastructure.


- As an example, you could have two different manifests checked into Git: a GA tagged 0.1.0 and the canary, tagged 0.2.0. 
  By altering the weights in the manifest of the Istio virtual gateway, the percentage of traffic for both of these deployments is managed.
























